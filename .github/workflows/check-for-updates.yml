name: Check for Game updates

on:
  schedule:
    # every day at 5:45 PM UTC (should be decently after beatgames usually releases their game)
    - cron: '45 17 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'feat/auto-generation'
    paths:
      - '.github/actions/download-app/*'
      - '.github/actions/get-latest-version/*'
      - '.github/actions/cordl-run/*'
      - '.github/workflows/check-for-updates.yml'
      - 'scripts/deno/*'
      - 'lastversion.txt'

env:
  ANDROID_PACKAGE: "com.beatgames.beatsaber"
  BRANCH_PREFIX: "bs"
  CORDL_GIT: "https://github.com/Fernthedev/cordl"
  CORDL_BRANCH: "dev/generic_methods_redo"

jobs:
  update-check:
    runs-on: ubuntu-latest
    outputs:
      update-required: ${{ !steps.version-check.outputs.result }}
      version: ${{ steps.latest-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Get latest version number
        id: latest-version
        uses: ./.github/actions/get-latest-version
        with:
          package: ${{ env.ANDROID_PACKAGE }}

      - name: Exit if package not found
        if: ${{ !steps.latest-version.outputs.found }}
        uses: actions/github-script@v6
        with:
          script: core.setFailed('package was not found!')

      - name: Check if tag exists for latest version
        if: ${{ steps.latest-version.outputs.found }}
        id: version-check
        env:
          GIT_TAG: bs-${{ steps.latest-version.outputs.version }}
        run: deno run --allow-env --allow-run --allow-write ./scripts/deno/checktag.ts

      - name: Print results
        run: |
          echo "Latest version: ${{ steps.latest-version.outputs.version }}"
          echo "Package found: ${{ steps.latest-version.outputs.found }}"
          echo "Update happened: ${{ steps.version-check.outputs.result }}"

  generate-headers:
    runs-on: ubuntu-latest
    needs: update-check
    outputs:
      target-branch: ${{ steps.target-branch.outputs.value }}
    if: ${{ needs.update-check.outputs.update-required }}
    steps:
      - uses: actions/checkout@v2

      - name: Output header branch name
        id: target-branch
        run: echo "value=update/$BRANCH_PREFIX-${{ needs.update-check.outputs.version }}" >> ${GITHUB_OUTPUT}

      - name: Download app
        id: download
        uses: ./.github/actions/download-app
        with:
          package:  ${{ env.ANDROID_PACKAGE }}
          version: ${{ needs.update-check.outputs.version }}
          oculus-token: ${{ secrets.OCULUS_TOKEN }}

      - name: Run cordl
        id: cordl-run
        uses: ./.github/actions/cordl-run
        with:
          cordl-git: ${{ env.CORDL_GIT }}
          cordl-branch: ${{ env.CORDL_BRANCH }}
          libil2cpp-path: ${{ steps.download.outputs.libil2cpp-path }}
          metadata-path: ${{ steps.download.outputs.metadata-path }}
          format: false

      - name: Move files
        run: |
          rm -rf ${GITHUB_WORKSPACE}/include
          mv ${{ steps.cordl-run.outputs.include-path }} ${GITHUB_WORKSPACE}/include

      - name: Configure commit
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"
          git checkout -b test-${{ steps.target-branch.outputs.value }}
          git push --set-upstream origin test-${{ steps.target-branch.outputs.value }}
      # we checkout a new branch so that we can test multiple times instead of having to delete commits from a used branch
      # this preemptive push will eventually be removed

      - name: Get QPM
        if: steps.cache-qpm.outputs.cache-hit != 'true'
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{secrets.GITHUB_TOKEN}}
          workflow: cargo-build.yml
          name: linux-qpm
          path: QPM
          repo: QuestPackageManager/QPM.CLI

      - name: Put QPM on path
        run: |
          chmod +x ./QPM/qpm
          echo "${GITHUB_WORKSPACE}/QPM" >> $GITHUB_PATH

      - name: Bump package minor version
        run: deno run --allow-run --allow-read ./scripts/deno/bump.ts

      # updated qpm info also needs to go to the main branch to work correctly
      - name: Update QPM info
        run: |
          qpm package edit-extra --branchName ${{ steps.target-branch.outputs.value }}
          qpm restore
          git add qpm.json qpm.shared.json
          git commit -m "Update Package version and info" --allow-empty

      # header files go to a seperate branch unrelated to the main one
      - name: Commit and push new header files to seperate branch
        env:
          VERSION: ${{ needs.update-check.outputs.version }}
          GIT_TAG: bs-${{ needs.update-check.outputs.version }}
          TARGET_BRANCH: ${{ steps.target-branch.outputs.value }}
        run: |
          git checkout -b $TARGET_BRANCH
          git add ./include
          git commit -q -m "Update headers -> $VERSION" --allow-empty
          git push --set-upstream origin $TARGET_BRANCH
          git tag $GIT_TAG
          git push origin $GIT_TAG

      - name: Get Commit ID
        id: commit-id
        run: |
          echo $(git rev-parse HEAD)
          echo "ID=$(git rev-parse HEAD)" >> ${GITHUB_OUTPUT}

      - name: Get QPM info
        id: qpm-info
        uses: RedBrumbler/qpm-info@main

      # don't create a release while testing
      # - name: Create release
      #   uses: ncipollo/release-action@v1
      #   with:
      #     commit: ${{ steps.commit-id.outputs.ID }}
      #     tag: "v${{ steps.qpm-info.outputs.version}}"
      #     name: "Update for ${{ needs.update-check.outputs.version }}"
      #     body: "Update for game version ${{ needs.update-check.outputs.version }}"

  format-headers:
    runs-on: ubuntu-latest
    needs: [ update-check, generate-headers ]
    if: ${{ needs.update-check.outputs.update-required }}
    steps:
      - name: Checkout updated branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-headers.outputs.target-branch }}

      - name: Setup deno
        uses: denoland/setup-deno@v1
        with:
          deno-version: v1.x

      - name: Install clang format
        run: sudo apt-get -y install clang-format

      - name: Format headers
        env:
          FORMAT_PATH: ./include
        run: deno run --allow-write --allow-read --allow-run --allow-env ./scripts/deno/format.ts

      - name: Configure commit
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"

      - name: Commit formatted files
        run: |
          git add ./include
          git commit -q -m "Format files"
          git push -u origin ${{ needs.generate-headers.outputs.target-branch }}

      - name: Retag game version commit
        env:
          GIT_TAG: bs-${{ needs.update-check.outputs.version }}
        run: |
          git tag $GIT_TAG
          git push origin $GIT_TAG --force
