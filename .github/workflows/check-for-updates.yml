name: Check for Game updates

on:
  schedule:
    # every day at 5:45 PM UTC (should be decently after beatgames usually releases their game)
    - cron: '45 17 * * *'
  workflow_dispatch:
  push:
    branches:
      - 'master'
      - 'feat/auto-generation'
    paths:
      - '.github/actions/app-download/*'
      - '.github/actions/get-latest-version/*'
      - '.github/actions/cordl-run/*'
      - '.github/workflows/check-for-updates.yml'
      - 'scripts/deno/*'
      - 'lastversion.txt'

env:
  ANDROID_PACKAGE: "com.beatgames.beatsaber"
  BRANCH_PREFIX: "bs"
  CORDL_GIT: "https://github.com/Fernthedev/cordl"
  CORDL_BRANCH: "dev/generic_methods_redo"

jobs:
  update-check:
    runs-on: ubuntu-latest
    outputs:
      update-happened: ${{ steps.version-check.outputs.result }}
      version: ${{ steps.latest-version.outputs.version }}
    steps:
      - uses: actions/checkout@v2

      - name: Get latest version number
        id: latest-version
        uses: ./.github/actions/get-latest-version
        with:
          package: ${{ env.ANDROID_PACKAGE }}

      - name: Exit if package not found
        if: ${{ steps.latest-version.outputs.found == 'false' }}
        uses: actions/github-script@v6
        with:
          script: core.setFailed('package was not found!')

      - name: Check if tag exists for latest version
        if: ${{ steps.latest-version.outputs.found == 'true' }}
        id: version-check
        uses: actions/github-script@v6
        with:
          script: |
            const tag = github.rest.tags.find(tag => { return tag == ${{ steps.latest-version.outputs.version }}; });
            return tag === undefined;

  generate-headers:
    runs-on: ubuntu-latest
    needs: update-check
    outputs:
      target-branch: ${{ steps.target-branch.outputs.value }}
    if: ${{ needs.update-check.outputs.update-happened == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Output header branch name
        id: target-branch
        run: echo "value='update/$BRANCH_PREFIX-${{ needs.update-check.outputs.version }}"

      - name: Download app
        id: download
        uses: ./.github/actions/download-app
        with:
          package:  ${{ env.ANDROID_PACKAGE }}
          version: ${{ needs.update-check.outputs.version }}
          oculus-token: ${{ secrets.OCULUS_TOKEN }}

      - name: Run cordl
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        id: cordl-run
        uses: ./.github/actions/cordl-run
        with:
          cordl-git: ${{ env.CORDL_GIT }}
          cordl-branch: ${{ env.CORDL_BRANCH }}
          libil2cpp-path: ${{ steps.download.outputs.libil2cpp-path }}
          metadata-path: ${{ steps.download.outputs.metadata-path }}
          format: false

      - name: Move files
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        run: |
          rm -rf ${GITHUB_WORKSPACE}/include
          mv ${{ steps.cordl-run.outputs.include-path }} ${GITHUB_WORKSPACE}/include

      - name: Configure commit
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        run: |
          git config user.name "Github Actions"
          git config user.email "<>"
          git checkout -b test-${{ steps.target-branch.outputs.value }}
          git push --set-upstream origin test-${{ steps.target-branch.outputs.value }}
      # we checkout a new branch so that we can test multiple times instead of having to delete commits from a used branch
      # this preemptive push will eventually be removed

      - name: Bump package minor version
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        run: deno run --allow-run --allow-read ./scripts/deno/bump.ts

      # updated qpm info also needs to go to the main branch to work correctly
      - name: Update QPM info
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        run: |
          qpm package edit-extra --branchName ${{ steps.target-branch.outputs.value }}
          qpm restore
          git add qpm.json qpm.shared.json
          git commit -m "Update Package version and info" --allow-empty
          git push

      # header files go to a seperate branch unrelated to the main one
      - name: Commit and push new header files to seperate branch
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        env:
          NEW_VERSION: ${{ steps.version-check.outputs.new-version }}
          TARGET_BRANCH: ${{ steps.target-branch.outputs.value }}
        run: |
          git checkout -b $TARGET_BRANCH
          git add ./include
          git tag bs-${{ steps.latest-version.outputs.version }}
          git commit -q -m "Update headers -> $NEW_VERSION" --allow-empty
          git push --set-upstream origin $TARGET_BRANCH

      - name: Get Commit ID
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        id: commit-id
        run: |
          echo $(git rev-parse HEAD)
          echo "ID=$(git rev-parse HEAD)" >> ${GITHUB_OUTPUT}

      - name: Get QPM info
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        id: qpm-info
        uses: RedBrumbler/qpm-info@main

      - name: Create release
        if: ${{ steps.version-check.outputs.update-available == 'true' }}
        uses: ncipollo/release-action@v1
        with:
          commit: ${{ steps.commit-id.outputs.ID }}
          tag: "v${{ steps.qpm-info.outputs.version}}"
          name: "Update for ${{ steps.version-check.outputs.new-version }}"
          body: "Update from game version ${{ steps.version-check.outputs.old-version }} -> ${{ steps.version-check.outputs.new-version }}"

  format-headers:
    runs-on: ubuntu-latest
    needs: [ update-check, generate-headers ]
    if: ${{ needs.update-check.outputs.update-happened == 'true' }}
    steps:
      - name: Checkout updated branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.generate-headers.outputs.target-branch }}

      - name: Format headers
        run: echo "TODO"
